## 함수형 컴포넌트와 훅 활용 ##
____________________________________________

((훅 Hook 이란 ??))
    React 함수형 컴포넌트에서 상태관리와 부작용 처리를 위한 기능 제공 함수
    (클래스 기반 컴포넌트에선 사용 ❌)

((부작용이란 ??))
    함수의 실행 과정에서 함수 외부에 영향을 미치는 동작을 말함.
    (Ex) 
        네트워크 요청, 데이터베이스 접근, DOM 조작, 이벤트 등
        -> 모두 함수의 실행과는 별개로 발생하는 외부 동작임!

((Why ?? 함수형 컴포넌트를 사용해야 하나? ))
    1. 코드의 가독성
     ->> 클래스 기반 컴포넌트에서는 render() 메서드와 다양한 라이프사이클 메서드를 구현해야 했지만...
        함수형 컴포넌트는 필요한 로직을 함수 안에 작성하여 코드를 더 직관적이고 읽기 쉽게 만듦!!!

    *******************************************************

    2. 재사용성 
     ->>  React 훅 API는 함수형 컴포넌트에서 상태관리 편하게 할 수 있도록 해줌.
         useState, useEffect, useContext 등의 훅을 사용하여 상태 값의 변경, 부작용 처리, 컨텍스트 접근 등을 간편하게 처리 가능~!
         -> 이를통해 재사용성이 up up up !!!

        (Ex)
        function App(){ // 첫번째 요소 - 상태변수의 현재값, 두번째 요소 - 상태값 변경 함수
        const [counter, setCounter] = React.useState(0); // useState는 리액트의 상태변경 훅!-> 초기값을 인자로 전달하면, 해당값으로 상태변수 초기화!

        const onClick = () => {
            setCounter(counter + 1); // setCounter 함수를 사용해 클릭수 업데이트!
        };
        
        return (
            <div>
                <h3>Total clicks: {counter}</h3>
                <button onClick={onClick}>Click me!</button>
            </div>
        )
    }
    *******************************************************

    3. 성능 및 유지보수성
     ->> 함수형 컴포넌트와 훅은 React의 내부 최적화 메커니즘과 잘 조합됨.
        함수형 컴포넌트의 렌더링을 더 효율적으로 처리, 훅을 통해 불필요한 렌더링 방지, 메모리 누수를 예방 가능함
        + 훅은 상태 관리를 함수형 컴포넌트 내에서 지역적으로 처리하기 때문에 컴포넌트 간 상태 공유가 필요한 경우에도 더 효과적으로 관리 가능함!
